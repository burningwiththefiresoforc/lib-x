#!/usr/bin/env bash
#A script written by Benexl in September 4, 2024 under GNU GENERAL PUBLIC LICENSE
#vibe coded contributions by burningwiththefiresoforc

CLI_HEADER='
██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗
██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝
██║░░░░░██║██████╦╝█████╗░╚███╔╝░
██║░░░░░██║██╔══██╗╚════╝░██╔██╗░
███████╗██║██████╦╝░░░░░░██╔╝╚██╗
╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝
'

CLI_NAME="lib-x"
CLI_VERSION="0.2.0"
CLI_AUTHOR="Benexl"

CLI_DIR="$(dirname "$(realpath "$0")")"
CLI_CONFIG_DIR="$HOME/.config/$CLI_NAME"
CLI_CONFIG_FILE="$CLI_CONFIG_DIR/${CLI_NAME}.conf"
CLI_DBS_DIR="$CLI_CONFIG_DIR/DBS"
CLI_CACHE_DIR="$HOME/.cache/$CLI_NAME"

[[ -d "$CLI_CACHE_DIR" ]] || mkdir -p "$CLI_CACHE_DIR"
[[ -d "$CLI_DBS_DIR" ]] || mkdir -p "$CLI_DBS_DIR"

CALIBRE_DB_JSON_FILE="$CLI_CACHE_DIR/calibre_db.json"
CALIBRE_CATEGORIES_CSV_FILE="$CLI_CACHE_DIR/calibre_categories.csv"

print_config() {
  cat <<EOF
#
#    ██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗  ░█████╗░░█████╗░███╗░░██╗███████╗██╗░██████╗░
#    ██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝  ██╔══██╗██╔══██╗████╗░██║██╔════╝██║██╔════╝░
#    ██║░░░░░██║██████╦╝█████╗░╚███╔╝░  ██║░░╚═╝██║░░██║██╔██╗██║█████╗░░██║██║░░██╗░
#    ██║░░░░░██║██╔══██╗╚════╝░██╔██╗░  ██║░░██╗██║░░██║██║╚████║██╔══╝░░██║██║░░╚██╗
#    ███████╗██║██████╦╝░░░░░░██╔╝╚██╗  ╚█████╔╝╚█████╔╝██║░╚███║██║░░░░░██║╚██████╔╝
#    ╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝  ░╚════╝░░╚════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝░╚═════╝░
#

# whether to show colors when printing ouput
PRETTY_PRINT: $PRETTY_PRINT

# your preferred editor for editing your config
EDITOR: $PREFERRED_EDITOR

# your preferred selector for the tui [fzf/rofi]
PREFERRED_SELECTOR: $PREFERRED_SELECTOR

# whether to show previews [true/false]
# its cool so enable it
ENABLE_PREVIEW: $ENABLE_PREVIEW

# whether to update the recent list kept locally [true/false]
UPDATE_RECENT: $UPDATE_RECENT

# the number of recent books to keep
NO_OF_RECENT: $NO_OF_RECENT

# the path to the calibre library
CALIBRE_LIBRARY_PATH: $CALIBRE_LIBRARY_PATH

# the image renderer to use
IMAGE_RENDERER: $IMAGE_RENDERER

# whether to disown the reading process
DISOWN_READING_PROCESS: $DISOWN_READING_PROCESS

# the number of random books
NO_OF_RANDOM_BOOKS: $NO_OF_RANDOM_BOOKS

# preferred file explorer when adding books etc
FILE_EXPLORER: $FILE_EXPLORER

# preferred terminal when using rofi
PREFERRED_TERMINAL: $PREFERRED_TERMINAL
EOF
}

load_config() {
  config_file="$CLI_CONFIG_FILE"
  [[ -f "$config_file" ]] || touch "$config_file"

  declare -A list_names=(
    ["READING"]="reading_list"
    ["PAUSED"]="paused_list"
    ["PLANING"]="planing_list"
    ["RE_READING"]="re_reading_list"
    ["COMPLETED"]="completed_list"
    ["DROPPED"]="dropped_list"
    ["DOCS"]="docs_list"
    ["RECENT"]="recent"
  )

  for key in "${!list_names[@]}"; do
    local var="DB_${key}_LIST"
    local path="$CLI_DBS_DIR/${list_names[$key]}"
    [[ -f "$path" ]] || touch "$path"
    export "$var"="$path"
  done

  declare -A config_defaults=(
    ["CALIBRE_LIBRARY_PATH"]="$HOME/Calibre Library"
    ["PRETTY_PRINT"]="true"
    ["FILE_EXPLORER"]="$(command -v yazi &>/dev/null && echo yazi || echo fzf)"
    ["IMAGE_RENDERER"]="$([[ -n "$KITTY_WINDOW_ID" ]] && echo icat || echo chafa)"
    ["DISOWN_READING_PROCESS"]="true"
    ["PREFERRED_EDITOR"]="${EDITOR:-open}"
    ["PREFERRED_SELECTOR"]="fzf"
    ["ENABLE_PREVIEW"]="false"
    ["UPDATE_RECENT"]="true"
    ["NO_OF_RECENT"]="30"
    ["NO_OF_RANDOM_BOOKS"]="30"
    ["PREFERRED_TERMINAL"]="kitty"
  )

  for key in "${!config_defaults[@]}"; do
    local value
    value="$(awk -F': ' -v k="$key" '$1 == k && !/^#/ { print $2 }' "$config_file")"
    [[ -z "$value" ]] && value="${config_defaults[$key]}"
    export "$key"="$value"
  done

  ROFI_THEME="$(awk -F': ' '/^ROFI_THEME:/ && !/#/ {print $2}' "$config_file")"
  export ROFI_THEME
  FZF_DEFAULT_OPTS=${LIBX_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
  '}
  export FZF_DEFAULT_OPTS IMAGE_RENDERER
}

LIB_X_PREVIEW=$(printf '%s\n' \
'if [[ -n {} && {} != "Exit" && {} != "Back" ]]; then' \
'  CALIBRE_DB=$(<'"$CALIBRE_DB_JSON_FILE"');' \
'  esc_title=$(echo {} | sed "s/\\//\\\\\\//g");' \
'  book=$(jq -r "map(select(.title == \"$esc_title\")) | .[0]" <<< "$CALIBRE_DB");' \
'' \
'  book_title=$(jq -r ".title" <<< "$book");' \
'  book_authors=$(jq -r ".authors" <<< "$book");' \
'  book_tags=$(jq -r ".tags | join(\", \")" <<< "$book");' \
'  book_cover=$(jq -r ".cover" <<< "$book");' \
'  book_comments=$(jq -r ".comments" <<< "$book");' \
'  book_langs=$(jq -r ".languages | join(\", \")" <<< "$book");' \
'' \
'  init_pretty_print;' \
'  [[ -s "$book_cover" ]] && fzf_preview "$book_cover";' \
'' \
'  for ((i = 0; i < FZF_PREVIEW_COLUMNS; i++)); do echo -n "─"; done; echo;' \
'  printf "${MAGENTA}${BOLD_LIB_X}Title:${RESET} %s\n" "$book_title";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Authors:${RESET} %s\n" "$book_authors";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Tags:${RESET} %s\n" "$book_tags";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Languages:${RESET} %s\n" "$book_langs";' \
'  for ((i = 0; i < FZF_PREVIEW_COLUMNS; i++)); do echo -n "─"; done; echo;' \
'' \
'  [[ "$book_comments" != "null" ]] && echo -e "$book_comments";' \
'else' \
'  echo Loading;' \
'fi')  

launch_in_terminal() { "$PREFERRED_TERMINAL" -e "$@"; }
#add functionality for other terminals

calibredb_clean() { calibredb "$@" | sed '/Initialized urlfixer/d;/^%$/d'; echo "]"; }
#LOL 

reload_calibre_data() {
	  library_timestamp=$(stat -c %Y "$CALIBRE_LIBRARY_PATH")
if [[ ! -s "$CALIBRE_DB_JSON_FILE" || ! -s "$CALIBRE_CATEGORIES_CSV_FILE" || ! -s "$CLI_CACHE_DIR/last_db_timestamp" || "$(<"$CLI_CACHE_DIR/last_db_timestamp")" != "$library_timestamp" || "$FORCE_UPDATE_DB" == "true" ]];then
      calibredb_clean list --for-machine --fields all > "$CALIBRE_DB_JSON_FILE"
      calibredb_clean list_categories --csv | sed '/]$/d' > "$CALIBRE_CATEGORIES_CSV_FILE"
      echo "$library_timestamp" > "$CLI_CACHE_DIR/last_db_timestamp"
      CALIBRE_DB="$(<"$CALIBRE_DB_JSON_FILE")"
  CALIBRE_CATEGORIES="$(<"$CALIBRE_CATEGORIES_CSV_FILE")"
fi
}

init_pretty_print() {
  if [[ "$PRETTY_PRINT" == "true" ]]; then
    RED=$(tput setaf 1)
    MAGENTA="\x1b[38;2;215;0;95m"
    CYAN=$(tput setaf 6)
    BOLD_LIB_X=$(tput bold)
    RESET=$(tput sgr0)
    export RED MAGENTA BOLD_LIB_X RESET CYAN
  fi
}

prompt() {
  if [[ "$PREFERRED_SELECTOR" == "rofi" ]]; then
    rofi -dmenu -p "$1: "
  elif command -v "gum" >/dev/null 2>&1; then
    gum input --header "$CLI_HEADER" --prompt "$1: " --value "$2"
  else
    echo "$CLI_HEADER" >/dev/stderr
    printf "%s: " "$1" >/dev/stderr
    read -r VAL
    echo "$VAL"
  fi
}

confirm() {
  if command -v "gum" >/dev/null 2>&1; then
    gum confirm "$1"
  elif [[ $PREFERRED_SELECTOR == "rofi" ]]; then
    selection=$(printf "No\nYes" | rofi -dmenu -i -p "$1")
    [[ "$selection" == "Yes" ]]
  else
    echo "$CLI_HEADER" > /dev/stderr
    printf "%s: " "$1" >/dev/stderr
    read -r CONFIRMED
    case "$CONFIRMED" in
    [yY]) return 0 ;;
    *) return 1 ;;
    esac
  fi
}


fzf_preview() {
  file=$1
  tty_size=$(stty size </dev/tty)
  rows=${tty_size%% *}
  cols=${tty_size##* }
  dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
  if [[ "$dim" == "x" ]]; then
	  dim="${cols}x${rows}"
  fi
  if [[ "$IMAGE_RENDERER" != "icat" && -z "$KITTY_WINDOW_ID" && "$((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES))" -eq "$rows" ]]; then
    dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))
  fi
if [[ "$IMAGE_RENDERER" == "icat" ]]; then
  if command -v kitten >/dev/null 2>&1; then
kitten icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
  elif command -v icat >/dev/null 2>&1; then
      icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
  else
    if [[ -n "$GHOSTTY_BIN_DIR" ]]; then
      chafa -s "$dim" "$file"
    else
      kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed '$d' | sed "$(printf "\$s/\$/\033[m/")"
    fi
  fi
elif command -v chafa >/dev/null 2>&1; then
    case "$PLATFORM" in
    android) chafa -s "$dim" "$file" ;;
    windows) chafa -f sixel -s "$dim" "$file" ;;
    *) chafa -s "$dim" "$file" ;;
    esac
    echo
  elif command -v imgcat >/dev/null; then
    imgcat -W "${dim%%x*}" -H "${dim##*x}" "$file"
  else
    echo "please install a terminal image viewer" >&2
    echo "either icat for kitty terminal and wezterm or imgcat or chafa" >&2
  fi
}

launcher() {
  case "$PREFERRED_SELECTOR" in
    rofi)
      rofi_args=(-sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Selection:" -sorting-method fzf)
      [[ -n "$ROFI_THEME" ]] && rofi_args=(-no-config -theme "$ROFI_THEME" "${rofi_args[@]}")
      sed -r 's/\x1B(\[[0-9;]*[a-zA-Z]|\(B)//g' | rofi "${rofi_args[@]}"
      ;;
    fzf)
      local fzf_opts_base=(
        --info=hidden
        --layout=reverse
        --height=100%
        --prompt="Selection: "
        --header-first --header="$CLI_HEADER"
        --exact --cycle --ansi
      )
      local fzf_opts_preview=(
        --preview-window=left,35%,wrap
        --bind=right:accept
        --expect=shift-left,shift-right
        --tabstop=1
        --preview="$LIB_X_PREVIEW"
      )
      [[ "$1" == 1 ]] && fzf_opts_base+=("${fzf_opts_preview[@]}")
        fzf "${fzf_opts_base[@]}"
      ;;
    *) notify-send "Calibre" "Unsupported selector: $PREFERRED_SELECTOR"; return 1 ;;
  esac
}

user_lists_manager() {
  declare -A list_dbs=(
    ["Reading"]="$DB_READING_LIST"
    ["Paused"]="$DB_PAUSED_LIST"
    ["Recent"]="$DB_RECENT_LIST"
    ["Re-reading"]="$DB_RE_READING_LIST"
    ["Completed"]="$DB_COMPLETED_LIST"
    ["Docs"]="$DB_DOCS_LIST"
    ["Planning"]="$DB_PLANING_LIST"
    ["Dropped"]="$DB_DROPPED_LIST"
  )

  local list_name="$1"
  local action="$2"
  local db_file="${list_dbs[$list_name]}"

[[ -z "$db_file" ]] && notify-send "Calibre" "Unknown list: $list_name" && return 1

  case "$action" in
    "add")
      if grep -qs "^${title}\$" "$db_file"; then
        notify-send "Calibre" "Already in $list_name list"
      else
        notify-send "Calibre" "Adding to $list_name list..."
        printf "%s\n" "$title" >> "$db_file"
      fi
      ;;
    "remove")
      if grep -q "^$title\$" "$db_file"; then
        if confirm "Are you sure you want to remove '$title' from $list_name List?"; then
          notify-send "Calibre" "Removing from $list_name list..."
          updated_list="$(grep -v "^$title\$" "$db_file")"
          printf "%s\n" "$updated_list" | grep -E '[[:alnum:]]+' > "$db_file"
        fi
      else
        notify-send "Calibre" "'$title' is not in your $list_name list"
      fi
      ;;
    *) notify-send "Calibre" "Unknown action: $action"; return 1 ;;
  esac
}

main() {
  init_pretty_print
  while true; do
    # ---- main menu ----
    if [[ -z "$GO_DIRECTLY_TO" ]]; then
      _categories=$(cut -d , -f 1 <<< "$CALIBRE_CATEGORIES" | tail -n +2 | awk '!seen[$0]++ { printf "%s%s  %s\n", "'"$CYAN"'", "'"$RESET"'", toupper(substr($0,1,1)) substr($0,2) }')
      action=$(printf "\
${CYAN}${RESET}  All
%s
${CYAN}${RESET}  Recent
${CYAN}${RESET}  Reading-List
${CYAN}${RESET}  Paused
${CYAN}${RESET}  Re-reading
${CYAN}${RESET}  Planning
${CYAN}${RESET}  Completed
${CYAN}${RESET}  Docs
${CYAN}${RESET}  Random
${CYAN}${RESET}  Dropped
${CYAN}${RESET}  Edit Config
${CYAN}${RESET}  Add Books
${CYAN}${RESET}  Add Books From Folder
${CYAN}${RESET}  Reload Data
${RED}󰈆${RESET}  Exit\n" "$_categories" | launcher 0 | sed 's/^.  //g')
else
      action="$GO_DIRECTLY_TO"
      unset GO_DIRECTLY_TO
    fi
    [[ $? -ne 0  ||  -z "$action"  ||  "$action" == "Exit" ]] && exit 0
   # ---- others ----
   case "$action" in
  "All"|"Random")
	  titles=$(jq -r '.[].title' <<< "$CALIBRE_DB")
    [[ "$action" == "Random" ]] && titles=$(shuf -n "$NO_OF_RANDOM_BOOKS" <<< "$titles")
    ;;
    # ---- calibre search ----
   "Formats"|"Series"|"Languages"|"Tags"|"Rating"|"Publisher"|"Identifiers"|"Authors")
  value=$(awk -F, -v f="${action,,}" '$1 == f { print $2 }' <<< "$CALIBRE_CATEGORIES" | launcher 0 | tr -d '"' | sed 's/[][\/$*.^|]/ /g' | xargs)
  [[ -z "$value" ]] && titles="" && continue
  calibre_field=${action,,}
  [[ "$calibre_field" == "authors" || "$calibre_field" == "identifiers" || "$calibre_field" == "languages" ]] && calibre_field="${calibre_field::-1}"
 cmd=(calibredb_clean list --search "$calibre_field:\"$value\"" --for-machine --fields=title)
[[ -n "$SORT_BY" ]] && cmd+=(--sort-by "$SORT_BY")
titles=$(jq -r '.[].title' < <("${cmd[@]}")) 
  ;;
    # ---- others ----
    "Edit Config")
[[ "$PREFERRED_SELECTOR" == "fzf" ]] && "$PREFERRED_EDITOR" "$CLI_CONFIG_FILE" || launch_in_terminal "$PREFERRED_EDITOR" "$CLI_CONFIG_FILE"
load_config
print_config > "$CLI_CONFIG_FILE"
continue
      ;;
   "Add Books"|"Add Books From Folder")
    local books_path
          if [[ "$FILE_EXPLORER" == "yazi" ]]; then
        [[ "$PREFERRED_SELECTOR" == "rofi" ]] && launch_in_terminal yazi --cwd-file "$CLI_CACHE_DIR/books_path" --chooser-file "$CLI_CACHE_DIR/books_path"
        [[ "$PREFERRED_SELECTOR" == "fzf" ]] && yazi --cwd-file "$CLI_CACHE_DIR/books_path" --chooser-file "$CLI_CACHE_DIR/books_path"
            books_path=$(<"$CLI_CACHE_DIR/books_path")
          elif [[ "$FILE_EXPLORER" == "fzf" ]]; then
	    [[ "$PREFERRED_SELECTOR" == "rofi" ]] && launch_in_terminal bash -c "find \"$HOME\" -type d | fzf" 
	    [[ "$action" == "Add Books From Folder" ]] && books_path=$(find "$HOME" -type d | fzf)
            [[ "$action" == "Add Books" ]] && books_path=$(find "$HOME" -type d | fzf --multi)
          else
            notify-send "Calibre" "Unsupported file explorer"; continue
          fi
            clear
            calibredb add --help
            custom_args=$(prompt "Enter your custom args separated by spaces (default: calibre_db add '$books_path')")
	    if confirm "Would you like to proceed in adding books? [y/n]"; then
  calibredb add "$books_path" "$custom_args" || notify-send "Calibre" "Failed to add books"
fi
  continue
          ;;
   "Reload Data")
          notify-send "Calibre" "Reloading calibre data" && FORCE_UPDATE_DB="true" reload_calibre_data
	  continue
          ;;
  "Reading-List"|"Dropped"|"Paused"|"Completed"|"Re-reading"|"Planning"|"Docs"|"Recent")
    normalized_action="${action//[- ]/_}"
    normalized_action="${normalized_action^^}"
    var_name="DB_${normalized_action}_LIST"
    file="${!var_name}"
if [[ -s "$file" ]]; then
    titles="$(<"$file")"
    [[ "$action" == "Recent" ]] && titles="$(tac "$file")"
    else
	    pretty_name="${action,,}"
      notify-send "Calibre" "You don't have anything in your ${pretty_name} list"; continue
    fi
    ;;
    *) notify-send "Calibre" 'invalid action'; continue ;;
    esac
    clear
    # book selection loop
    while true; do
      # ---- select book ----
export SHELL="bash"
export -f fzf_preview init_pretty_print
launcher_flag=$([[ "$ENABLE_PREVIEW" == "true" ]] && echo 1 || echo 0)
title=$(printf "%s\nBack\nExit\n" "$titles" | launcher "$launcher_flag" | tr -d '\n')
case "$title" in
  "Exit") exit 0 ;;
  "Back"|"") break ;;
esac
clear
book=$(jq -r --arg title "$title" 'map(select(.title == $title)) | .[0]' < "$CALIBRE_DB_JSON_FILE")
           # ---- book actions ----
      while true; do
        action=$(
          printf "\
${CYAN}${RESET}  Read
${CYAN}${RESET}  Open Folder
${CYAN}${RESET}  Add To List
${CYAN}${RESET}  Remove From List
${CYAN}${RESET}  Remove Book
${CYAN}${RESET}  Edit Metadata
${CYAN}←${RESET}  Back
${RED}󰈆${RESET}  Exit\n" | launcher 0 | sed 's/^.  //g')
        [[ $? -ne 0 || -z "$action" || "$action" == "Back" ]] && break
        case "$action" in
        "Read"|"Open Folder")
          # update recent list
          if [[ "$UPDATE_RECENT" == "true" ]]; then
            updated_recent_file_contents=$(grep --invert-match -s "^$title\$" <"$DB_RECENT_LIST" | grep --extended-regexp "[[:alnum:]]+" | tail -n "$NO_OF_RECENT")
            printf "%s\n" "$updated_recent_file_contents" > "$DB_RECENT_LIST"
            printf "%s\n" "$title" >> "$DB_RECENT_LIST"
          fi
          # open book or folder
	  book_path=$(jq -r '.formats[0]' <<< "$book")
if [[ "$action" == "Read" ]]; then
  opener=$(command -v open || command -v xdg-open)
   if [[ -n "$opener" ]]; then  
	   "$opener" "$book_path" &>/dev/null & 
else
	notify-send "Calibre" "No supported reader found"
fi
  else
	dir_path="$(dirname "$book_path")"
if [[ -d "$dir_path" ]]; then
	"$FILE_EXPLORER" "$dir_path"
else
notify-send "Calibre" "Folder not found: $dir_path"
fi
	  fi
          # disown
          [[ "${PREFERRED_SELECTOR,,}" == "rofi"  ||  "$DISOWN_READING_PROCESS" == "false" ]] && wait
          [[ "$DISOWN_READING_PROCESS" == "true"  &&  "${PREFERRED_SELECTOR,,}" == "fzf" ]] && disown
          ;;
         "Add To List" | "Remove From List")
		 list_action="${action,,}"
  list_target=$(printf "Reading\nPaused\nPlanning\nRe-reading\nDocs\nCompleted\nDropped\nRecent\n" | launcher 0)
  user_lists_manager "$list_target" "$list_action"
  ;; 
        "Remove Book")
		book_id=$(jq -r '.id' <<< "$book")
          confirm "Are you sure you want to remove $title" && calibredb remove "$book_id" && notify-send "Calibre" "Successfully removed"
          ;;
  "Edit Metadata")
      metadata_field=$(printf "\
author_sort
authors
comments
cover
id
identifiers
languages
pubdate
publisher
rating
series
series_index
size
sort
tags
timestamp
title
title_sort
Cancel\n" | launcher 0 )
	[[ -z "$metadata_field" || "$metadata_field" == "Cancel" || $? -ne 0 ]] && notify-send "Calibre" "Metadata editing canceled." && continue
	book_id=$(jq -r '.id' <<< "$book")
	calibredb show_metadata "$book_id"
	metadata_val=$(prompt "Enter new value for $metadata_field")
	[[ -z "$metadata_val" ]] && notify-send "Calibre" "No value entered. Not updated." && continue
	calibredb set_metadata "$book_id" --field "$metadata_field:$metadata_val"
	calibredb backup_metadata
	reload_calibre_data
	;;  
        "Exit") exit 0 ;;
        *) notify-send "Calibre" "invalid action" ;;
        esac
        clear
      done
    done
  done
}

# ---- cli ----
trap exit 0 INT TERM

usage() {
  printf "\
Usage: %s [arguments] [options] 

Commandline options override the config
Some of the options are directly passed to calibredb

Options:
  -g, --go-directly-to
    open $CLI_NAME with a sub-menu pre-selected
  -e, --edit-config
    edit $CLI_NAME config file
  --rofi-theme <path>
    set the path to your rofi config file
  -d,--disown-reading-process
    disown the reading process so you can contine reading even if you close $CLI_NAME
  -D,--no-disown-reading-process
    don't disown the reading process hence when $CLI_NAME closes the app your using to read your book will also close
  -p <selector>,--preferred-selector <selector>
    set the preferred selector for $CLI_NAME to use
  --preview
    enable the preview window
  --no-preview
    disable the preview window
  -r <number>, --no-of-random-books <number>
    the number of random books to show; also makes the cli auto choose Random sub-menu
  -h, --help
    Show this help message and exit
  -v, --version
    print the $CLI_NAME version and exit

arguments:
  completions
    generates shell completions for $CLI_NAME

Examples:
  $CLI_NAME --search tag:chess --sort-by author
  $CLI_NAME --search tag:chess 
  $CLI_NAME --sort-by size 
  $CLI_NAME --go-directly-to Reading-List --sort-by size
  $CLI_NAME --go-directly-to Reading-List 
  $CLI_NAME --no-of-random-books 50 --go-directly-to Random

  $CLI_NAME completions --fish 
" "$CLI_NAME"
  exit "$1"
}

load_config
[[ ! -s "$CLI_CONFIG_FILE" ]] && print_config > "$CLI_CONFIG_FILE"

while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage 0
    ;;
  -v | --version)
    echo "$CLI_NAME $CLI_VERSION Copyright © 2024 $CLI_AUTHOR projects"
    exit 0
    ;;
  -e | --edit-config)
    $PREFERRED_EDITOR "$CLI_CONFIG_FILE" || exit 1
    exit 0
    ;;
  -g | --go-directly-to)
    [ -n "$2" ] || usage 1
    GO_DIRECTLY_TO="$2"
    shift
    ;;
  -r | --no-of-random-books)
    [ -n "$2" ] || usage 1
    NO_OF_RANDOM_BOOKS="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-Random}"
    shift
    ;;
  -p | --preferred-selector)
    [ -n "$2" ] || usage 1
    PREFERRED_SELECTOR="$2"
    shift
    ;;
  --private)
    UPDATE_RECENT="false"
    ;;
  --preview)
    ENABLE_PREVIEW="true"
    ;;
  --no-preview)
    ENABLE_PREVIEW="false"
    ;;
  -d | --disown-reading-process)
    DISOWN_READING_PROCESS="true"
    ;;
  -D | --no-disown-reading-process)
    DISOWN_READING_PROCESS="false"
    ;;
  --rofi-theme)
    [ -n "$2" ] || usage 1
    ROFI_THEME="$2"
    shift
    ;;
  -E | --generate-desktop-entry)
    echo "
[Desktop Entry]
Name=$CLI_NAME
Type=Application
version=$CLI_VERSION
Path=$HOME
Comment=Read and manage your calibre books from the terminal
Terminal=false
Icon=$CLI_DIR/assets/logo.png
Exec=$0 --preferred-selector rofi
Categories=Education
    "
    exit 0
    ;;
  completions)
    [ -n "$2" ] || usage 1
    case "$2" in
    -f | --fish)
      echo "\
# --- functions ---
function _lib_x_complete_search
  for comp_line in (calibredb_clean list_categories --csv) 
    echo (echo \$comp_line|cut --delimiter , --fields 1):(echo \$comp_line|cut --delimiter , --fields 2|tr -d '\"')
  end
end

# --- completions ---
complete -c $CLI_NAME --no-files --arguments \"completions\" --condition 'not __fish_contains_opt search s sort-by S e edit-config p preferred-selector d disown-reading-process D no-disown-reading-process E generate-desktop-entry rofi-theme'

complete -c $CLI_NAME --no-files --short-option h --long-option help --description 'Print a short help text and exit'
complete -c $CLI_NAME --no-files --short-option v --long-option version --description 'Print a short version string and exit' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --short-option U --long-option update --description 'Update lib-x' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option e --long-option edit-config --description 'Edit $CLI_NAME config file' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option p --long-option preferred-selector --description 'your preferred selector' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'fzf rofi'
complete -c $CLI_NAME --no-files --short-option d --long-option disown-reading-process --description 'disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option D --long-option no-disown-reading-process --description 'dont disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option E --long-option generate-desktop-entry --description 'generate desktop entry info' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --short-option r --long-option no-of-random-books --description 'the number of random books to show' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(seq 100)\" 
complete -c $CLI_NAME --no-files --short-option P --long-option private --description 'dont update recent' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --long-option preview --description 'enable preview window' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --long-option no-preview --description 'disable preview window' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --force-files --long-option rofi-theme --description 'the path to your rofi config file' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --no-files --short-option S --long-option sort-by --description 'Sort the books by a field' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'author_sort authors comments cover formats identifiers isbn languages last_modified pubdate publisher rating series series_index size tags template timestamp title uuid'
complete -c $CLI_NAME --no-files --short-option g --long-option go-directly-to --description 'Open $CLI_NAME with a sub-menu pre-selected' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'All Reading-List Paused Planing Re-reading Completed Docs Random authors formats identifiers languages  publisher rating series tags Recent'
complete -c $CLI_NAME --no-files --short-option s --long-option search --description 'search for a book' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(_lib_x_complete_search)\"

complete -c $CLI_NAME --no-files --short-option z --long-option zsh --description 'print zsh completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option b --long-option bash --description 'print bash completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option f --long-option fish --description 'print fish completions' --condition '__fish_seen_subcommand_from completions'
    "
      ;;
    -b | --bash)
      # TODO: write bash completions
      command ...
      ;;
    -z | --zsh)
      # TODO: write zsh completions
      command ...
      ;;
    -h | --help)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      ;;
    *)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      exit 1
      ;;
    esac
    exit 0
    ;;
  *)
    usage 1
    ;;
  esac
  shift
done

reload_calibre_data
for dep in calibre jq fzf; do
  type "$dep" &>/dev/null || { echo "$dep is required but not installed." >&2; exit 1; }
done
main
