#!/usr/bin/env bash
#A script written by Benexl in September 4, 2024 under GNU GENERAL PUBLIC LICENSE
#refactoring and additions (vibe coded) by burningwiththefiresoforc

CLI_HEADER='
██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗
██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝
██║░░░░░██║██████╦╝█████╗░╚███╔╝░
██║░░░░░██║██╔══██╗╚════╝░██╔██╗░
███████╗██║██████╦╝░░░░░░██╔╝╚██╗
╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝
'

CLI_NAME="lib-x"
CLI_VERSION="0.2.0"
CLI_AUTHOR="Benexl"

CLI_DIR="$(dirname "$(realpath "$0")")"
CLI_CONFIG_DIR="$HOME/.config/$CLI_NAME"
CLI_CONFIG_FILE="$CLI_CONFIG_DIR/${CLI_NAME}.conf"
CLI_DBS_DIR="$CLI_CONFIG_DIR/DBS"
CLI_CACHE_DIR="$HOME/.cache/$CLI_NAME"

[[ -d "$CLI_CACHE_DIR" ]] || mkdir -p "$CLI_CACHE_DIR"
[[ -d "$CLI_DBS_DIR" ]] || mkdir -p "$CLI_DBS_DIR"

CACHE_FILE="$CLI_CACHE_DIR/calibre_cache.tsv"

print_config() {
  cat <<EOF
# whether to show colors when printing ouput
PRETTY_PRINT: $PRETTY_PRINT

# your preferred editor for editing your config
EDITOR: $PREFERRED_EDITOR

# your preferred selector for the tui [fzf/rofi]
PREFERRED_SELECTOR: $PREFERRED_SELECTOR

# whether to show previews [true/false]
# its cool so enable it
ENABLE_PREVIEW: $ENABLE_PREVIEW

# whether to update the recent list kept locally [true/false]
UPDATE_RECENT: $UPDATE_RECENT

# the number of recent books to keep
NO_OF_RECENT: $NO_OF_RECENT

# the path to the calibre library
CALIBRE_LIBRARY_PATH: $CALIBRE_LIBRARY_PATH

# the image renderer to use. Options: icat (kitty only), imgcat (wezterm), chafa
IMAGE_RENDERER: $IMAGE_RENDERER

# whether to disown the reading process
DISOWN_READING_PROCESS: $DISOWN_READING_PROCESS

# the number of random books
NO_OF_RANDOM_BOOKS: $NO_OF_RANDOM_BOOKS

# preferred file explorer when adding books etc
FILE_EXPLORER: $FILE_EXPLORER

# preferred terminal when using rofi
PREFERRED_TERMINAL: $PREFERRED_TERMINAL

#rofi theme
ROFI_THEME: $ROFI_THEME

EOF
}

load_config() {
  [[ -f "$CLI_CONFIG_FILE" ]] || touch "$CLI_CONFIG_FILE"

for category in Reading Recent Completed Docs Planning; do
  file_name="${category,,}_list"
  path="$CLI_DBS_DIR/$file_name"
  [[ -f "$path" ]] || touch "$path"
  var_name="DB_${category^^}_LIST"
  export "$var_name=$path"
done

declare -A config_defaults=(
    ["CALIBRE_LIBRARY_PATH"]="$HOME/Calibre Library"
    ["PRETTY_PRINT"]="true"
    ["FILE_EXPLORER"]="$(type -P yazi &>/dev/null && echo yazi || echo fzf)"
    ["IMAGE_RENDERER"]="$([[ -n "$KITTY_WINDOW_ID" ]] && echo icat || echo chafa)"
    ["DISOWN_READING_PROCESS"]="true"
    ["PREFERRED_EDITOR"]="${EDITOR:-open}"
    ["PREFERRED_SELECTOR"]="fzf"
    ["ENABLE_PREVIEW"]="false"
    ["UPDATE_RECENT"]="true"
    ["NO_OF_RECENT"]="30"
    ["NO_OF_RANDOM_BOOKS"]="30"
    ["PREFERRED_TERMINAL"]="kitty"
    ["ROFI_THEME"]=""
  )

  declare -A file_config
  while IFS=':' read -r key value; do
    key=$(echo "$key" | tr -d '[:space:]')
    value=$(echo "$value" | sed 's/^[[:space:]]*//')
    [[ -n "$key" ]] && file_config["$key"]="$value"
  done < "$CLI_CONFIG_FILE"

  for key in "${!config_defaults[@]}"; do
    value="${file_config[$key]:-${config_defaults[$key]}}"
    export "$key"="$value"
  done

  FZF_DEFAULT_OPTS=${LIBX_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
  '}
  export FZF_DEFAULT_OPTS
  if [[ "$PRETTY_PRINT" == "true" ]]; then
    RED=$(tput setaf 1)
    MAGENTA="\x1b[38;2;215;0;95m"
    CYAN=$(tput setaf 6)
    BOLD_LIB_X=$(tput bold)
    RESET=$(tput sgr0)
    export RED MAGENTA BOLD_LIB_X RESET CYAN
  fi
}

LIB_X_PREVIEW=$(printf '%s\n' \
'if [[ -n {} && {} != "Exit" && {} != "Back" ]]; then' \
'  esc_title=$(echo {} | sed "s/\\//\\\\\\//g; s/\"/\\\\\"/g");' \
'  IFS=$'\''\t'\'' read -r book_id book_title book_authors book_tags book_cover book_comments book_langs book_path < <(' \
'    awk -F"\t" -v title="$esc_title" '\''$2 == title {print; exit}'\'' '"$CACHE_FILE"' );' \
'' \
'  [[ -s "$book_cover" ]] && fzf_preview "$book_cover";' \
'  hr() { printf '\''%*s\n'\'' "$FZF_PREVIEW_COLUMNS" "" | tr " " "─"; }' \
'' \
'  for ((i = 0; i < FZF_PREVIEW_COLUMNS; i++)); do echo -n "─"; done; echo;' \
'  printf "${MAGENTA}${BOLD_LIB_X}Title:${RESET} %s\n" "$book_title";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Authors:${RESET} %s\n" "$book_authors";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Tags:${RESET} %s\n" "$book_tags";' \
'  printf "${MAGENTA}${BOLD_LIB_X}Languages:${RESET} %s\n" "$book_langs";' \
'  for ((i = 0; i < FZF_PREVIEW_COLUMNS; i++)); do echo -n "─"; done; echo;' \
'' \
'  [[ "$book_comments" != "null" && -n "$book_comments" ]] && echo -e "$book_comments";' \
'else' \
'  echo Loading;' \
'fi')

launch_in_terminal() { "$PREFERRED_TERMINAL" -e "$@"; }
#add functionality for other terminals

reload_calibre_data() {
  calibredb list --for-machine --fields "id,title,authors,publisher,tags,formats,comments,series,rating,cover,languages,identifiers" | jq -r '
  .[] |
  . as $b |
  ($b.formats // []) as $f |
  ($b.tags // []) as $t |
  ($b.languages // []) as $l |
  ($b.identifiers // {}) as $i |
  [
    ($b.id // "-" | tostring | select(. != "") // "-"),
    ($b.title // "-" | gsub("[\t\n\r]"; " ") | select(. != "") // "-"),
    ($b.authors // "-" | gsub("[\t\n\r]"; " ") | gsub(" +& +| +and +"; "; ") | select(. != "") // "-"),
    (if $t != [] then ($t | join("; ") | gsub("[\t\n\r]"; " ")) else "-" end),
    (if $b.cover then ($b.cover | tostring | gsub("[\t\n\r]"; " ")) else "-" end),
    (if $b.comments then ($b.comments | tostring | gsub("<[^>]+>"; "") | gsub("[\t\n\r]"; " ") | select(. != "null" and . != "") // "-") else "-" end),
    (if $l != [] then ($l | map(ascii_upcase) | join("; ") | gsub("[\t\n\r]"; " ")) else "-" end),
    (if $f != [] then ($f | map(split(".")[-1] | ascii_upcase) | join("; ")) else "-" end),
    (if ($b.series | length) > 0 then ($b.series | join("; ") | gsub("[\t\n\r]"; " ")) else "-" end),
    ($b.rating | tostring // "-"),
    ($b.publisher // "-" | gsub("[\t\n\r]"; " ") | select(. != "") // "-"),
    (if ($i | length) > 0 then ($i | to_entries | map("\(.key):\(.value)") | join("; ")) else "-" end),
    (if $f != [] then ($f[0] | gsub("[\t\n\r]"; " ")) else "-" end)
  ] | @tsv
' > "$CACHE_FILE"
_categories="$(calibredb list_categories --csv |
  awk -F, -v c="$CYAN" -v r="$RESET" '
    NR > 1 && !seen[$1]++ {
      $1 = toupper(substr($1,1,1)) substr($1,2)
      printf("%s%s  %s\n", c, r, $1)
    }'
)"
  if [[ -n "$SEARCH" || -n "$SORT_BY" ]]; then
    calibredb_args=(list --for-machine --fields all)
  [[ -n "$SEARCH" ]] && calibredb_args+=(--search "$SEARCH")
  [[ -n "$SORT_BY" ]] && calibredb_args+=(--sort-by "$SORT_BY")
  titles=$(calibredb "${calibredb_args[@]}" | jq -r '.[].title')
  [[ -z "$titles" ]] && notify-send "Calibre" "No results found" && exit 0
  SKIP_TO_BOOK_SELECTION=1 
  fi
}

prompt() {
  local label="$1"
  local default="$2"
  local mode="${3:-0}"
  local selection response
  if [[ "$PREFERRED_SELECTOR" == "rofi" ]]; then
    if [[ "$mode" == "1" ]]; then
      selection=$(printf "No\nYes" | rofi -dmenu -i -p "$label")
      [[ "$selection" == "Yes" ]]
    else
      rofi -dmenu -p "$label: "
    fi
  elif type -P gum >/dev/null 2>&1; then
    if [[ "$mode" == "1" ]]; then
      gum confirm "$label"
    else
      gum input --header "$CLI_HEADER" --prompt "$label: " --value "$default"
    fi
  else
	  if [[ "$mode" == "1" ]]; then
  selection=$(printf "No\nYes" | fzf --prompt="$label: " --height=15% --min-height=3 --layout=reverse --border --ansi --info=hidden)
  [[ "$selection" == "Yes" ]]
else
  response=$(fzf --prompt="$label: " --print-query --height=10% --min-height=1 --layout=reverse --border --info=hidden <<< "")
  input=$(echo head -n1 <<< "$response" )
  echo "$input"
fi
  fi
}

fzf_preview() {
  local file="$1"
  local rows cols
  read -r rows cols <<< "$(stty size </dev/tty)"
  local dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
  [[ "$dim" == "x" ]] && dim="${cols}x${rows}"
  [[ "$IMAGE_RENDERER" != "icat" && -z "$KITTY_WINDOW_ID" && "$((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES))" -eq "$rows" ]] && dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))

case "$IMAGE_RENDERER" in  
"icat")
	if type kitten >/dev/null 2>&1; then
  	icat_cmd=(kitten icat)
	else
  	icat_cmd=(kitty icat)
	fi
"${icat_cmd[@]}" --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed -e '$d' -e "$(printf "\$s/\$/\033[m/")"
;;
"chafa") chafa -s "$dim" "$file" ;;
"imgcat") imgcat -W "${dim%%x*}" -H "${dim##*x}" "$file" ;;
*)   echo "Please install a terminal image viewer. Either icat for kitty terminal, imgcat for wezterm, or chafa." >&2 ;;
esac
}

launcher() {
  case "$PREFERRED_SELECTOR" in
    rofi)
      local rofi_args=(-sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Selection:" -sorting-method fzf)
      [[ -n "$ROFI_THEME" ]] && rofi_args=(-no-config -theme "$ROFI_THEME" "${rofi_args[@]}")
      sed -r 's/\x1B(\[[0-9;]*[a-zA-Z]|\(B)//g' | rofi "${rofi_args[@]}"
      ;;
    fzf)
      local fzf_opts_base=(
        --info=hidden --layout=reverse --height=100%
        --prompt="Selection: "
        --header-first --header="$CLI_HEADER"
        --bind=right:accept --exact --cycle --ansi
      )
      local fzf_opts_preview=(
        --preview-window=left,35%,wrap
        --tabstop=1
        --preview="$LIB_X_PREVIEW"
      )
      [[ "$1" == 1 ]] && fzf_opts_base+=("${fzf_opts_preview[@]}")
        fzf "${fzf_opts_base[@]}"
      ;;
    *) notify-send "Calibre" "Unsupported selector: $PREFERRED_SELECTOR"; return 1 ;;
  esac
}

#might add functionality to add your own user-defined lists
user_lists_manager() {
  local list_name="$1"
  local db_file="DB_${list_name^^}_LIST"
  db_file="${!db_file}"

[[ -z "$db_file" ]] && notify-send "Calibre" "Unknown list: $list_name" && return 1
  case "$2" in
    "Add To List")
      if grep -qsF -- "^${title}\$" "$db_file"; then
        notify-send "Calibre" "Already in $list_name list."
      else
        notify-send "Calibre" "Added to $list_name list."
        printf "%s\n" "$title" >> "$db_file"
      fi
      ;;
    "Remove From List")
	    echo "$title"
      if grep -qxF -- "$title" "$db_file"; then
        if prompt "Are you sure you want to remove '$title' from $list_name List?" "" 1; then
          notify-send "Calibre" "Removed from $list_name list."
          sed -i "/^${title}\$/d" "$db_file"
        fi
      else
        notify-send "Calibre" "'$title' is not in your $list_name list"
      fi
      ;;
    *) notify-send "Calibre" "Unknown action: $2"; return 1 ;;
  esac
}

main() {
  while true; do
    # ---- main menu ----
    if [[ -z "$GO_DIRECTLY_TO" ]]; then
action=$( launcher 0 <<< "${CYAN}${RESET}  All
${_categories}
${CYAN}${RESET}  Recent
${CYAN}${RESET}  Reading
${CYAN}${RESET}  Planning
${CYAN}${RESET}  Completed
${CYAN}${RESET}  Docs
${CYAN}${RESET}  Random
${CYAN}${RESET}  Edit Config
${CYAN}${RESET}  Add Books
${CYAN}${RESET}  Add Books From Folder
${CYAN}${RESET}  Reload Data
${RED}󰈆${RESET}  Exit" )
action="${action#?  }"
elif [[ "$SKIP_TO_BOOK_SELECTION" == "1" ]]; then
	action="Do Nothing"
else
      action="$GO_DIRECTLY_TO"
      unset GO_DIRECTLY_TO
    fi
    [[ $? -ne 0  ||  -z "$action"  ||  "$action" == "Exit" ]] && exit 0
   # ---- others ----
   case "$action" in
  "All"|"Random")
	  titles="$(cut -f 2 "$CACHE_FILE")"
    [[ "$action" == "Random" ]] && titles=$(shuf -n "$NO_OF_RANDOM_BOOKS" <<< "$titles")
    ;;
    # ---- calibre search ----
"Formats"|"Series"|"Languages"|"Tags"|"Rating"|"Publisher"|"Identifiers"|"Authors")
 case "$action" in
  "Authors")     col=3 ;;
  "Tags")        col=4 ;;
  "Languages")   col=7 ;;
  "Formats")     col=8 ;;
  "Series")      col=9 ;;
  "Rating")      col=10 ;;
  "Publisher")   col=11 ;;
  "Identifiers") col=12 ;;
  *)             notify-send "Calibre" "Unknown field: $action"; continue ;;
esac

local value=$(awk -F'\t' -v col="$col" -v field="$action" '
  {
    split($col, parts, /;[ ]*/)
    for (i in parts) {
      v = parts[i]
      gsub(/^[[:space:]]+|[[:space:]]+$/, "", v)
      if (v != "-" && v != "") {
        if (field == "Identifiers") {
          split(v, kv, ":")
          if (kv[1] != "") {
            seen[kv[1]] = 1
          }
        } else {
          seen[v] = 1
        }
      }
    }
  }
  END {
    for (v in seen) {
      print v
    }
  }
' "$CACHE_FILE" | sort | launcher 0 | tr -d '"')

[[ -z "$value" ]] && titles="" && continue

titles=$(awk -v val="$value" -v col="$col" -v field="$action" -F'\t' '
  {
    split($col, parts, /;[ ]*/)
    for (i in parts) {
      if (field == "Identifiers") {
        split(parts[i], kv, ":")
        if (kv[1] == val) {
          print $2
          break
        }
      } else {
        if (parts[i] == val) {
          print $2
          break
        }
      }
    }
  }
' "$CACHE_FILE")
  ;;
    # ---- others ----
    "Edit Config")
[[ "$PREFERRED_SELECTOR" == "fzf" ]] && "$PREFERRED_EDITOR" "$CLI_CONFIG_FILE" || launch_in_terminal "$PREFERRED_EDITOR" "$CLI_CONFIG_FILE"
load_config
print_config > "$CLI_CONFIG_FILE"
continue
      ;;
   "Add Books"|"Add Books From Folder")
    local books_path
          if [[ "$FILE_EXPLORER" == "yazi" ]]; then
        [[ "$PREFERRED_SELECTOR" == "rofi" ]] && launch_in_terminal yazi --cwd-file "$CLI_CACHE_DIR/books_path" --chooser-file "$CLI_CACHE_DIR/books_path"
        [[ "$PREFERRED_SELECTOR" == "fzf" ]] && yazi --cwd-file "$CLI_CACHE_DIR/books_path" --chooser-file "$CLI_CACHE_DIR/books_path"
            books_path=$(<"$CLI_CACHE_DIR/books_path")
          elif [[ "$FILE_EXPLORER" == "fzf" ]]; then
	    [[ "$PREFERRED_SELECTOR" == "rofi" ]] && launch_in_terminal bash -c "find \"$HOME\" -type d | fzf" 
	    [[ "$action" == "Add Books From Folder" ]] && books_path=$(find "$HOME" -type d | fzf)
            [[ "$action" == "Add Books" ]] && books_path=$(find "$HOME" -type d | fzf --multi)
          else
            notify-send "Calibre" "Unsupported file explorer"; continue
          fi
            clear
            calibredb add --help | less
	    local custom_args
	    read -r -a custom_args <<< "$(prompt "Enter your custom args separated by spaces (default: calibre_db add '$books_path')" "")"
if prompt "Would you like to proceed in adding books?" "" 1; then
    calibredb add "$books_path" "${custom_args[@]}" || notify-send "Calibre" "Failed to add books"
fi
clear
  continue
          ;;
   "Reload Data")
          notify-send "Calibre" "Reloading calibre data" && reload_calibre_data
	  continue
          ;;
  "Reading"|"Paused"|"Completed"|"Planning"|"Docs"|"Recent")
    action="${action^^}"
    local var_name="DB_${action}_LIST"
    local file="${!var_name}"
if [[ -s "$file" ]]; then
    titles="$(<"$file")"
    [[ "$action" == "RECENT" ]] && titles="$(tac "$file")"
    else
      notify-send "Calibre" "You don't have anything in your ${action,,} list"; continue
    fi
    ;;
    "Do Nothing") : ;;
    *) notify-send "Calibre" 'invalid action'; continue ;;
    esac
    clear
    # book selection loop
    while true; do
      # ---- select book ----
export SHELL="bash"
export -f fzf_preview
local launcher_flag=$([[ "$ENABLE_PREVIEW" == "true" ]] && echo 1 || echo 0)
title=$(launcher "$launcher_flag" <<< "$(printf '%s\nBack\nExit\n' "$titles")" | tr -d '\n' | sed 's/"/\\"/g')
case "$title" in
  "Exit") exit 0 ;;
  "Back"|"") break ;;
esac
clear
           # ---- book actions ----
      while true; do
	  local book_path="$(awk -F'\t' -v title="$title" '$2 == title {print $13; exit}' "$CACHE_FILE")"
	      action=$( launcher 0 <<< "${CYAN}${RESET}  Read
${CYAN}${RESET}  Open Folder
${CYAN}${RESET}  Add To List
${CYAN}${RESET}  Remove From List
${CYAN}${RESET}  Remove Book
${CYAN}${RESET}  Edit Metadata
${CYAN}←${RESET}  Back
${RED}󰈆${RESET}  Exit")
action="${action#?  }"
        [[ $? -ne 0 || -z "$action" || "$action" == "Back" ]] && break
        case "$action" in
        "Read"|"Open Folder")
          # update recent list
          if [[ "$UPDATE_RECENT" == "true" ]]; then
		  {
			  local updated_recent_file_contents="$(awk -v t="$title" -v n="$NO_OF_RECENT" '$0!=t && /[[:alnum:]]/{lines[++c]=$0} END{for(i=c-n+1;i<=c;i++) if(i>0) print lines[i]}' "$DB_RECENT_LIST")"
            printf "%s\n" "$updated_recent_file_contents" > "$DB_RECENT_LIST"
            printf "%s\n" "$title" >> "$DB_RECENT_LIST" 
    } &
          fi
          # open book or folder
	  local opener
if [[ "$action" == "Read" ]]; then
if opener=$(type -P open || type -P xdg-open); then
  "$opener" "$book_path" &>/dev/null &
else
  notify-send "Calibre" "No supported reader found"
fi
  else
	local dir_path="$(dirname "$book_path")"
if [[ -d "$dir_path" && "${PREFERRED_SELECTOR,,}" == "fzf" ]];then 
	"$FILE_EXPLORER" "$dir_path" 
elif [[ -d "$dir_path" && "${PREFERRED_SELECTOR,,}" == "rofi" ]];then
	launch_in_terminal "$FILE_EXPLORER" "$dir_path"
else
notify-send "Calibre" "Folder not found: $dir_path"
fi
	  fi
          # disown
          [[ "${PREFERRED_SELECTOR,,}" == "rofi"  ||  "$DISOWN_READING_PROCESS" == "false" ]] && wait
          [[ "$DISOWN_READING_PROCESS" == "true"  &&  "${PREFERRED_SELECTOR,,}" == "fzf" ]] && disown
          ;;
         "Add To List" | "Remove From List")
		 local list_target=$(launcher 0 <<< $'Reading\nPlanning\nDocs\nCompleted\nRecent')
  user_lists_manager "$list_target" "$action"
  ;; 
        "Remove Book")
		local book_id="$(awk -F'\t' -v title="$title" '$2 == title {print $1; exit}' "$CACHE_FILE")"
          prompt "Are you sure you want to remove $title?" "" 1 
	  calibredb remove "$book_id" && notify-send "Calibre" "Successfully removed"
          ;;
  "Edit Metadata")
      action=$( launcher 0 <<< "author_sort
authors
comments
cover
id
identifiers
languages
pubdate
publisher
rating
series
series_index
size
sort
tags
timestamp
title
title_sort
Cancel" )
	[[ -z "$action" || "$action" == "Cancel" || $? -ne 0 ]] && notify-send "Calibre" "Metadata editing canceled." && continue
	local book_id="$(awk -F'\t' -v title="$title" '$2 == title {print $1; exit}' "$CACHE_FILE")"
	calibredb show_metadata "$book_id"
	local metadata_val=$(prompt "Enter new value for $action" "")
	[[ -z "$metadata_val" ]] && notify-send "Calibre" "No value entered. Not updated." && continue
	calibredb set_metadata "$book_id" --field "$action:$metadata_val"
	calibredb backup_metadata
	reload_calibre_data
	;;  
        "Exit") exit 0 ;;
        *) notify-send "Calibre" "invalid action" ;;
        esac
        clear
      done
    done
  done
}

# ---- cli ----
trap exit 0 INT TERM

usage() {
  printf "\
Usage: %s [options] 

Commandline options override the config
Some of the options are directly passed to calibredb

Options:
  -s, --search
    search for a book based on calibredb search syntax
  -S, --sort-by 
    sort the books on a specified field
  -g, --go-directly-to
    open $CLI_NAME with a sub-menu pre-selected
  -e, --edit-config
    edit $CLI_NAME config file
  --rofi-theme <path>
    set the path to your rofi config file
  -d,--disown-reading-process
    disown the reading process so you can contine reading even if you close $CLI_NAME
  -D,--no-disown-reading-process
    don't disown the reading process hence when $CLI_NAME closes the app your using to read your book will also close
  -p <selector>,--preferred-selector <selector>
    set the preferred selector for $CLI_NAME to use
  --preview
    enable the preview window
  --no-preview
    disable the preview window
  -r <number>, --no-of-random-books <number>
    the number of random books to show; also makes the cli auto choose Random sub-menu
  -h, --help
    Show this help message and exit
  -v, --version
    print the $CLI_NAME version and exit
  exit "$1"
  "
}

for dep in calibre jq fzf; do
  type "$dep" &>/dev/null || { echo "$dep is required but not installed." >&2; exit 1; }
done

notify-send -t 1500 "Calibre" "Loading database."
load_config
[[ ! -s "$CLI_CONFIG_FILE" ]] && print_config > "$CLI_CONFIG_FILE"

while [[ $# -gt 0 ]]; do
  case "$1" in
  -h|--help) usage 0 ;;
  -v|--version) echo "$CLI_NAME $CLI_VERSION Copyright © 2024 $CLI_AUTHOR projects"; exit 0 ;;
  -e|--edit-config) "$PREFERRED_EDITOR" "$CLI_CONFIG_FILE" || exit 1; exit 0 ;;
  -g|--go-directly-to) [[ -n "$2" ]] || usage 1; GO_DIRECTLY_TO="$2"; shift ;;
  -p|--preferred-selector) [[ -n "$2" ]] || usage 1; PREFERRED_SELECTOR="$2"; shift ;;
  --private) UPDATE_RECENT="false" ;;
  -d|--disown-reading-process) DISOWN_READING_PROCESS="true" ;;
  -D|--no-disown-reading-process) DISOWN_READING_PROCESS="false" ;;
  --preview) ENABLE_PREVIEW="true" ;;
  --no-preview) ENABLE_PREVIEW="false" ;;
  --rofi-theme) [[ -n "$2" ]] || usage 1; ROFI_THEME="$2"; shift ;;
  -r|--no-of-random-books) [[ -n "$2" ]] || usage 1; NO_OF_RANDOM_BOOKS="$2"; GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-Random}"; shift ;;
  -S|--sort-by) [[ -n "$2" ]] || usage 1; SORT_BY="$2"; GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"; shift ;;
  -s|--search) [[ -n "$2" ]] || usage 1; SEARCH="$2"; GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"; shift ;;
  -E|--generate-desktop-entry)
    echo "
[Desktop Entry]
Name="$CLI_NAME"
Type=Application
version="$CLI_VERSION"
Path=$HOME
Comment=Read and manage your calibre books from the terminal
Terminal=false
Icon=$CLI_DIR/assets/logo.png
Exec=$0 --preferred-selector rofi
Categories=Education
    "
    exit 0
    ;;
  *) usage 1 ;;
  esac
  shift
done

reload_calibre_data
notify-send -t 1500 "Calibre" "Done"
main
