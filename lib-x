#!/usr/bin/env bash
#A script written by Benexl in September 4, 2024 under GNU GENERAL PUBLIC LICENSE
#vibe coded contributions by burningwiththefiresoforc

CLI_HEADER='
██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗
██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝
██║░░░░░██║██████╦╝█████╗░╚███╔╝░
██║░░░░░██║██╔══██╗╚════╝░██╔██╗░
███████╗██║██████╦╝░░░░░░██╔╝╚██╗
╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝
'

CLI_NAME="lib-x"
CLI_VERSION="0.2.0"
CLI_AUTHOR="Benexl"

CLI_DIR="$(dirname "$(realpath "$0")")"
CLI_CONFIG_DIR="$HOME/.config/$CLI_NAME"
CLI_CONFIG_FILE="$CLI_CONFIG_DIR/${CLI_NAME}.conf"
CLI_DBS_DIR="$CLI_CONFIG_DIR/DBS"
CLI_CACHE_DIR="$HOME/.cache/$CLI_NAME"

[ -d "$CLI_CACHE_DIR" ] || mkdir -p "$CLI_CACHE_DIR"
[ -d "$CLI_DBS_DIR" ] || mkdir -p "$CLI_DBS_DIR"

CALIBRE_DB_JSON_FILE="$CLI_CACHE_DIR/calibre_db.json"
CALIBRE_CATEGORIES_CSV_FILE="$CLI_CACHE_DIR/calibre_categories.csv"

print_config() {
  echo "\
#
#    ██╗░░░░░██╗██████╗░░░░░░░██╗░░██╗  ░█████╗░░█████╗░███╗░░██╗███████╗██╗░██████╗░
#    ██║░░░░░██║██╔══██╗░░░░░░╚██╗██╔╝  ██╔══██╗██╔══██╗████╗░██║██╔════╝██║██╔════╝░
#    ██║░░░░░██║██████╦╝█████╗░╚███╔╝░  ██║░░╚═╝██║░░██║██╔██╗██║█████╗░░██║██║░░██╗░
#    ██║░░░░░██║██╔══██╗╚════╝░██╔██╗░  ██║░░██╗██║░░██║██║╚████║██╔══╝░░██║██║░░╚██╗
#    ███████╗██║██████╦╝░░░░░░██╔╝╚██╗  ╚█████╔╝╚█████╔╝██║░╚███║██║░░░░░██║╚██████╔╝
#    ╚══════╝╚═╝╚═════╝░░░░░░░╚═╝░░╚═╝  ░╚════╝░░╚════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝░╚═════╝░
#

# whether to show colors when printing ouput
PRETTY_PRINT: $PRETTY_PRINT

# your preferred editor for editing your config
EDITOR: $PREFERRED_EDITOR

# your preferred selector for the tui [fzf/rofi]
PREFERRED_SELECTOR: $PREFERRED_SELECTOR

# whether to show previews [true/false]
# its cool so enable it
ENABLE_PREVIEW: $ENABLE_PREVIEW

# whether to update the recent list kept locally [true/false]
UPDATE_RECENT: $UPDATE_RECENT

# the number of recent books to keep
NO_OF_RECENT: $NO_OF_RECENT

# the path to the calibre library
CALIBRE_LIBRARY_PATH: $CALIBRE_LIBRARY_PATH

# the image renderer to use
IMAGE_RENDERER: $IMAGE_RENDERER

# whether to disown the reading process
DISOWN_READING_PROCESS: $DISOWN_READING_PROCESS

# the number of random books
NO_OF_RANDOM_BOOKS: $NO_OF_RANDOM_BOOKS

# preferred file explorer when adding books etc
FILE_EXPLORER: $FILE_EXPLORER

# preferred terminal when using rofi
PREFERRED_TERMINAL: $PREFERRED_TERMINAL
"
}

load_config() {
  config_file="$CLI_CONFIG_FILE"
  [ -f "$config_file" ] || touch "$config_file"

  declare -A list_names=(
    ["READING"]="reading_list"
    ["PAUSED"]="paused_list"
    ["PLANING"]="planing_list"
    ["RE_READING"]="re_reading_list"
    ["COMPLETED"]="completed_list"
    ["DROPPED"]="dropped_list"
    ["DOCS"]="docs_list"
    ["RECENT"]="recent"
  )

  for key in "${!list_names[@]}"; do
    local var="DB_${key}_LIST"
    local path="$CLI_DBS_DIR/${list_names[$key]}"
    [ -f "$path" ] || touch "$path"
    export "$var"="$path"
  done

  declare -A config_defaults=(
    ["CALIBRE_LIBRARY_PATH"]="$HOME/Calibre Library"
    ["PRETTY_PRINT"]="true"
    ["FILE_EXPLORER"]="$(command -v yazi &>/dev/null && echo yazi || echo fzf)"
    ["IMAGE_RENDERER"]="$([ -n \"$KITTY_WINDOW_ID\" ] && echo icat || echo chafa)"
    ["DISOWN_READING_PROCESS"]="true"
    ["PREFERRED_EDITOR"]="${EDITOR:-open}"
    ["PREFERRED_SELECTOR"]="fzf"
    ["ENABLE_PREVIEW"]="false"
    ["UPDATE_RECENT"]="true"
    ["NO_OF_RECENT"]="30"
    ["NO_OF_RANDOM_BOOKS"]="30"
    ["PREFERRED_TERMINAL"]="kitty"
  )

  for key in "${!config_defaults[@]}"; do
    local value
    value="$(awk -F': ' -v k="$key" '$1 == k && !/^#/ { print $2 }' "$config_file")"
    [ -z "$value" ] && value="${config_defaults[$key]}"
    export "$key"="$value"
  done

  ROFI_THEME="$(awk -F': ' '/^ROFI_THEME:/ && !/#/ {print $2}' "$config_file")"
  export ROFI_THEME

  FZF_DEFAULT_OPTS=${LIBX_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
  '}
  export FZF_DEFAULT_OPTS IMAGE_RENDERER

  print_config > "$CLI_CONFIG_FILE"
}

LIB_X_PREVIEW="
if ! [ -z {} ] && ! [ {} = \"Exit\" ] && ! [ {} = \"Back\" ];then
  CALIBRE_DB=\"\$(cat \"$CALIBRE_DB_JSON_FILE\")\";
  title=\"\$(echo {} | sed 's/\\\/\\\\\\\/g;')\";
  book=\$(echo \"\$CALIBRE_DB\" |jq -r \"map(select(.title == \\\"\$title\\\")) | .[0]\")
  book_title=\$(echo  \"\$book\"|jq -r '.title');
  book_authors=\$(echo  \"\$book\"|jq -r '.authors');
  book_tags=\$(echo  \"\$book\"|jq -r '.tags|join(\", \")');
  book_cover=\$(echo  \"\$book\"|jq -r '.cover');
  book_comments=\$(echo  \"\$book\"|jq -r '.comments');
  book_langs=\$(echo  \"\$book\"|jq -r '.languages[]');
  
  init_pretty_print;
  if [ -s \"\$book_cover\" ];then
    fzf_preview  \"\$book_cover\";
  fi

  ll=1
  while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
  printf \"\${MAGENTA}\${BOLD_LIB_X}Title:\${RESET} \$book_title\n\";
  printf \"\${MAGENTA}\${BOLD_LIB_X}Authors:\${RESET} \$book_authors\n\";
  printf \"\${MAGENTA}\${BOLD_LIB_X}Tags:\${RESET} \$book_tags\n\";
  printf \"\${MAGENTA}\${BOLD_LIB_X}Languages:\${RESET} \$book_langs\n\";

  ll=1
  while [ \$ll -le \$FZF_PREVIEW_COLUMNS ];do echo -n -e \"─\" ;(( ll++ ));done;
 ! [ \"\$book_comments\" = "null" ] && echo -e \"\$book_comments\"
  
else\
  echo Loading;\
fi;\
      "

launch_in_terminal() {
  "$PREFERRED_TERMINAL" -e "$@"
}

reload_calibre_data() {
  calibredb_args=(list --for-machine --fields all)
  [ -n "$SEARCH" ] && calibredb_args+=(--search "$SEARCH")
  [ -n "$SORT_BY" ] && calibredb_args+=(--sort-by "$SORT_BY")
  if [ -n "$SEARCH" ] || [ -n "$SORT_BY" ]; then
    CALIBRE_DB="$(calibredb_clean "${calibredb_args[@]}")"
    CALIBRE_CATEGORIES="$(<"$CALIBRE_CATEGORIES_CSV_FILE")"
  else
[ ! -s "$CALIBRE_DB_JSON_FILE" ] && FORCE_UPDATE_DB=true
[ ! -s "$CALIBRE_CATEGORIES_CSV_FILE" ] && FORCE_UPDATE_DB=true
[ ! -s "$CLI_CACHE_DIR/last_db_timestamp" ] && FORCE_UPDATE_DB=true
[ -s "$CLI_CACHE_DIR/last_db_timestamp" ] && \
[ "$(cat "$CLI_CACHE_DIR/last_db_timestamp")" != "$(ls -ld "$CALIBRE_LIBRARY_PATH")" ] && FORCE_UPDATE_DB=true
    if [ "$FORCE_UPDATE_DB" = "true" ]; then
      calibredb_clean list --for-machine --fields all > "$CALIBRE_DB_JSON_FILE"
      CALIBRE_DB="$(cat "$CALIBRE_DB_JSON_FILE")"
      calibredb_clean list_categories --csv | sed '/]$/d' > "$CALIBRE_CATEGORIES_CSV_FILE"
      CALIBRE_CATEGORIES="$(cat "$CALIBRE_CATEGORIES_CSV_FILE")"
      command ls -ld "$CALIBRE_LIBRARY_PATH" >"$CLI_CACHE_DIR/last_db_timestamp"
    else
      CALIBRE_CATEGORIES="$(cat "$CALIBRE_CATEGORIES_CSV_FILE")"
      CALIBRE_DB="$(cat "$CALIBRE_DB_JSON_FILE")"
    fi
  fi
}

init_pretty_print() {
  if [ "$PRETTY_PRINT" = "true" ]; then
    RED=$(tput setaf 1)
    MAGENTA="\x1b[38;2;215;0;95m"
    CYAN=$(tput setaf 6)
    BOLD_LIB_X=$(tput bold)
    RESET=$(tput sgr0)
    export RED MAGENTA BOLD_LIB_X RESET CYAN
  fi
}

prompt() {
  if [ "$PREFERRED_SELECTOR" = "rofi" ]; then
    rofi -dmenu -p "$1: "
  elif command -v "gum" >/dev/null 2>&1; then
    gum input --header "$CLI_HEADER" --prompt "$1: " --value "$2"
  else
    echo "$CLI_HEADER" >/dev/stderr
    printf "%s: " "$1" >/dev/stderr
    read -r VAL
    echo "$VAL"
  fi
}

confirm() {
  if command -v "gum" >/dev/null 2>&1; then
    gum confirm "$1"
  elif [[ $PREFERRED_SELECTOR == "rofi" ]]; then
    selection=$(printf "No\nYes" | rofi -dmenu -i -p "$1")
    [[ "$selection" == "Yes" ]]
  else
    echo "$CLI_HEADER" >/dev/stderr
    printf "$1" >/dev/stderr
    read -r CONFIRMED
    case "$CONFIRMED" in
    y | Y)
      return 0
      ;;
    *)
      return 1
      ;;
    esac
  fi
}

core_dep_ch() {
  ! command -v "calibre" >/dev/null 2>&1 && echo "calibre is not installed and is a core dep please install it to proceed" >&2 && exit 1
  ! command -v "jq" >/dev/null 2>&1 && echo "jq is not installed and is a core dep please install it to proceed" >&2 && exit 1
  ! command -v "fzf" >/dev/null 2>&1 && echo "fzf is not installed and is a core dep please install it to proceed" >&2 && exit 1
}

send_notification() {
  notify-send "Calibre" "$1"
}

calibredb_clean() {
  calibredb "$@" | sed '/Initialized urlfixer/d;/^%$/d'; echo "]"
  #LOL
}

fzf_preview() {
  file=$1
  tty_size=$(stty size </dev/tty)
  rows=${tty_size%% *}
  cols=${tty_size##* }
  dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
  if [ "$dim" = "x" ]; then
	  dim="${cols}x${rows}"
  fi
  if [ "$IMAGE_RENDERER" != "icat" ] && [ -z "$KITTY_WINDOW_ID" ] && [ "$((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES))" -eq "$rows" ]; then
    dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))
  fi
if [ "$IMAGE_RENDERER" = "icat" ]; then
  if command -v kitten >/dev/null 2>&1; then
kitten icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
  elif command -v icat >/dev/null 2>&1; then
      icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed "\$d" | sed "$(printf "\$s/\$/\033[m/")"
  else
    if [ -n "$GHOSTTY_BIN_DIR" ]; then
      chafa -s "$dim" "$file"
    else
      kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed '$d' | sed "$(printf '\$s/\$/\033[m/')"
    fi
  fi
elif command -v chafa >/dev/null 2>&1; then
    case "$PLATFORM" in
    android) chafa -s "$dim" "$file" ;;
    windows) chafa -f sixel -s "$dim" "$file" ;;
    *) chafa -s "$dim" "$file" ;;
    esac
    echo
  elif command -v imgcat >/dev/null; then
    imgcat -W "${dim%%x*}" -H "${dim##*x}" "$file"
  else
    echo "please install a terminal image viewer" >&2
    echo "either icat for kitty terminal and wezterm or imgcat or chafa" >&2
  fi
}

launcher() {
  strip_ansi() {
    sed -r 's/\x1B(\[[0-9;]*[a-zA-Z]|\(B)//g'
  }

  case "$PREFERRED_SELECTOR" in
    rofi)
      rofi_args=(-sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Selection:" -sorting-method fzf)
      [ -n "$ROFI_THEME" ] && rofi_args=(-no-config -theme "$ROFI_THEME" "${rofi_args[@]}")
      strip_ansi | rofi "${rofi_args[@]}"
      ;;
    fzf)
      local fzf_opts_base=(
        --info=hidden
        --layout=reverse
        --height=100%
        --prompt="Selection: "
        --header-first --header="$CLI_HEADER"
        --exact --cycle --ansi
      )
      local fzf_opts_preview=(
        --preview-window=left,35%,wrap
        --bind=right:accept
        --expect=shift-left,shift-right
        --tabstop=1
        --preview="$LIB_X_PREVIEW"
      )
      if [[ "$1" == 1 ]]; then
        fzf "${fzf_opts_base[@]}" "${fzf_opts_preview[@]}"
      else
        fzf "${fzf_opts_base[@]}"
      fi
      ;;
    *)
      echo "Unsupported selector: $PREFERRED_SELECTOR" >&2
      return 1
      ;;
  esac
}

user_lists_manager() {
  declare -A list_dbs=(
    ["Reading"]="$DB_READING_LIST"
    ["Paused"]="$DB_PAUSED_LIST"
    ["Recent"]="$DB_RECENT_LIST"
    ["Re-reading"]="$DB_RE_READING_LIST"
    ["Completed"]="$DB_COMPLETED_LIST"
    ["Docs"]="$DB_DOCS_LIST"
    ["Planning"]="$DB_PLANING_LIST"
    ["Dropped"]="$DB_DROPPED_LIST"
  )

  local list_name="$1"
  local action="$2"
  local db_file="${list_dbs[$list_name]}"

  if [ -z "$db_file" ]; then
    send_notification "Unknown list: $list_name"
    return 1
  fi

  case "$action" in
    "add")
      if grep -qs "^${title}\$" "$db_file"; then
        send_notification "Already in $list_name list"
      else
        send_notification "Adding to $list_name list..."
        echo "$title" >> "$db_file"
      fi
      ;;
    "remove")
      if grep -q "^$title\$" "$db_file"; then
        if confirm "Are you sure you want to remove '$title' from $list_name List?"; then
          send_notification "Removing from $list_name list..."
          updated_list="$(grep -v "^$title\$" "$db_file")"
          echo "$updated_list" | grep -E '[[:alnum:]]+' >"$db_file"
        fi
      else
        send_notification "'$title' is not in your $list_name list"
      fi
      ;;
    *)
      send_notification "Unknown action: $action"
      return 1
      ;;
  esac
}

main() {
  init_pretty_print
  while true; do
    local books_path
    # ---- main menu ----
    if [[ -n "$GO_DIRECTLY_TO" ]]; then
      action="$GO_DIRECTLY_TO"
      unset GO_DIRECTLY_TO
    else
      _categories=$(for category in $(echo "$CALIBRE_CATEGORIES" | tail -n +2 | cut -d , -f 1 | uniq); do echo "${CYAN}${RESET}  ${category^}"; done)
      action=$(printf "\
${CYAN}${RESET}  All
%s
${CYAN}${RESET}  Recent
${CYAN}${RESET}  Reading-List
${CYAN}${RESET}  Paused
${CYAN}${RESET}  Re-reading
${CYAN}${RESET}  Planning
${CYAN}${RESET}  Completed
${CYAN}${RESET}  Docs
${CYAN}${RESET}  Random
${CYAN}${RESET}  Dropped
${CYAN}${RESET}  Edit Config
${CYAN}${RESET}  Add Books
${CYAN}${RESET}  Add Books From Folder
${CYAN}${RESET}  Reload Data
${RED}󰈆${RESET}  Exit\n" "$_categories" | launcher 0 | sed 's/^.  //g')
    fi
    if [[ $? -ne 0 || -z "$action" || "$action" == *Exit* ]]; then
  	    exit 0
    fi
   # ---- others ----
   case "$action" in
  "All"|"Random")
    titles=$(echo "$CALIBRE_DB" | jq -r '.[].title')
    if [[ "$action" == "Random" ]]; then
      titles=$(echo "$titles" | shuf -n "$NO_OF_RANDOM_BOOKS")
    fi
    ;;
    # ---- calibre search ----
   "Formats"|"Series"|"Languages"|"Tags"|"Rating"|"Publisher"|"Identifiers"|"Authors")
  field=$(echo "$action" | tr '[:upper:]' '[:lower:]')
  value=$(echo "$CALIBRE_CATEGORIES" | grep "^$field" | cut -d , -f 2 | launcher 0 | tr -d '"' | sed 's/[]\/$*.^|[]/ /g' | xargs)

  if [ -z "$value" ]; then
    titles=""
    continue
  fi

  case "$field" in
    authors) calibre_field="author" ;;
    identifiers) calibre_field="identifier" ;;
    languages) calibre_field="language" ;;
    *) calibre_field="$field" ;;
  esac

  if [ -n "$SORT_BY" ]; then
    titles=$(calibredb_clean list --search "$calibre_field:\"$value\"" --sort-by "$SORT_BY" --for-machine --fields=title | jq '.[].title' -r)
  else
    titles=$(calibredb_clean list --search "$calibre_field:\"$value\"" --for-machine --fields=title | jq '.[].title' -r)
  fi
  ;;
    # ---- others ----
    "Edit Config")
"$PREFERRED_EDITOR" "$CLI_CONFIG_FILE"
load_config
continue
      ;;
   "Add Books"|"Add Books From Folder")
          if [[ "$FILE_EXPLORER" == "yazi" ]]; then
            [ "$PREFERRED_SELECTOR" == "fzf" ] && yazi --cwd-file "$CLI_CACHE_DIR/books_path"
	    [ "$PREFERRED_SELECTOR" == "rofi" ] && launch_in_terminal yazi --cwd-file "$CLI_CACHE_DIR/books_path"
            books_path=$(cat "$CLI_CACHE_DIR/books_path")
          elif [[ "$FILE_EXPLORER" == "fzf" ]]; then
	    [ "$PREFERRED_SELECTOR" == "fzf" ] && launch_in_terminal bash -c 'find "$HOME" -type d | fzf' 
	    [ "$action" == "Add Books From Folder" ] && books_path=$(find "$HOME" -type d | fzf)
            [ "$action" == "Add Books"] && books_path=$(find "$HOME" -type d | fzf --multi)
          else
            send_notification "Unsupported file explorer"
            continue
          fi
          if confirm "Would you like to input custom args (default: calibre_db add '$books_path')"; then
            clear
            calibredb add --help
            custom_args=$(prompt "Enter your custom args separated by spaces")
          fi
          confirm "Would you like to proceed in adding books?" && calibredb add "$books_path" $custom_args || send_notification "Failed to add books"
          ;;
   "Reload Data")
          send_notification "Reloading calibre data" && FORCE_UPDATE_DB="true" reload_calibre_data
          ;;
  "Reading-List"|"Dropped"|"Paused"|"Completed"|"Re-reading"|"Planning"|"Docs"|"Recent")
    normalized_action="${action//[- ]/_}"
    normalized_action="${normalized_action^^}"
    var_name="DB_${normalized_action}_LIST"
    file="${!var_name}"
if [ -s "$file" ]; then
  if [ "$action" = "Recent" ]; then
    titles="$(tac "$file")"
  else
    titles="$(cat "$file")"
  fi
    else
	pretty_name="$(echo "$action" | tr '[:upper:]' '[:lower:]')"
      send_notification "You don't have anything in your ${pretty_name} list" && continue
    fi
    ;;
    *)
      send_notification 'invalid action'
      continue
      ;;
    esac
    clear
    # book selection loop
    while true; do
      # ---- select book ----
export SHELL="bash"
export -f fzf_preview init_pretty_print
launcher_flag=$([[ "$ENABLE_PREVIEW" == "true" ]] && echo 1 || echo 0)
title=$(printf "%s\nBack\nExit\n" "$titles" | launcher "$launcher_flag" | tr -d '\n')
case "$title" in
  "Exit") exit 0 ;;
  "Back"|"") 
    [[ -z "$title" ]] && send_notification "Nothing has been selected"
    break
    ;;
esac
clear
book=$(jq -r --arg title "$title" 'map(select(.title == $title)) | .[0]' < "$CALIBRE_DB_JSON_FILE")
           # ---- book actions ----
      while true; do
        action=$(
          printf "\
${CYAN}${RESET}  Read
${CYAN}${RESET}  Open Folder
${CYAN}${RESET}  Add To List
${CYAN}${RESET}  Remove From List
${CYAN}${RESET}  Remove Book
${CYAN}${RESET}  Edit Metadata
${CYAN}←${RESET}  Back
${RED}󰈆${RESET}  Exit\n" | launcher 0 | sed 's/^.  //g')
        if [[ $? -ne 0 || -z "$action" || "$action" == *Back* ]]; then
		break
	fi
        case "$action" in
        "Read"|"Open Folder")
          # update recent list
          if [ "$UPDATE_RECENT" = "true" ]; then
            updated_recent_file_contents=$(grep --invert-match -s "^$title\$" <"$DB_RECENT_LIST" | grep --extended-regexp "[[:alnum:]]+" | tail -n "$NO_OF_RECENT")
            echo "$updated_recent_file_contents" > "$DB_RECENT_LIST"
            echo "$title" >> "$DB_RECENT_LIST"
          fi
          # open book or folder
          book_path="$(echo "$book" | jq -r '.formats[0]')"
	  if [[ "$action" == "Read" ]]; then
          if command -v "open"; then
            open "$book_path" &>/dev/null &
          elif command -v "xdg-open"; then
            xdg-open "$book_path" &>/dev/null &
          else
            send_notification "No supported reader found"
          fi
  else
	dir_path="$(dirname "$book_path")"
  	if [ -d "$dir_path" ]; then
    "$FILE_EXPLORER" "$dir_path"
  else
    send_notification "Folder not found: $dir_path"
  fi
	  fi
          # disown
          [ "${PREFERRED_SELECTOR,,}" = "rofi" ] && wait
          [ "$DISOWN_READING_PROCESS" = "true" ] && [ "${PREFERRED_SELECTOR,,}" = "fzf" ] && disown
          [ "$DISOWN_READING_PROCESS" = "false" ] && [ "${PREFERRED_SELECTOR,,}" = "fzf" ] && wait
          ;;
         "Add To List" | "Remove From List")
  list_action=$(echo "$action" | awk '{print tolower($1)}')  # "add" or "remove"
  list_target=$(printf "Reading\nPaused\nPlanning\nRe-reading\nDocs\nCompleted\nDropped\nRecent\n" | launcher 0)
  user_lists_manager "$list_target" "$list_action"
  ;; 
        "Remove Book")
          book_id="$(echo "$book" | jq -r '.id')"
          confirm "Are you sure you want to remove $title" && calibredb remove "$book_id" && send_notification "Successfully removed"
          ;;
  "Edit Metadata")
      metadata_field=$(printf "\
author_sort
authors
comments
cover
id
identifiers
languages
pubdate
publisher
rating
series
series_index
size
sort
tags
timestamp
title
title_sort
Cancel\n" | launcher 0 )
	if [[ -z "$metadata_field" || "$metadata_field" == "Cancel" || $? -ne 0 ]]; then
	  send_notification "Metadata editing canceled."
	  continue
	fi
	book_id="$(echo "$book" | jq -r '.id')"
	calibredb show_metadata "$book_id"
	metadata_val=$(prompt "Enter new value for $metadata_field")
	if [[ -z "$metadata_val" ]]; then
	  send_notification "No value entered. Not updated."
	  continue
	fi
	calibredb set_metadata "$book_id" --field "$metadata_field:$metadata_val"
	calibredb backup_metadata
	reload_calibre_data
	;;  
        "Exit")
          exit 0
          ;;
        *)
          send_notification "invalid action"
          ;;
        esac
        clear
      done
    done
  done
}

# ---- cli ----
trap exit 0 INT TERM

usage() {
  printf "\
Usage: %s [arguments] [options] 

Commandline options override the config
Some of the options are directly passed to calibredb

Options:
  -s, --search
    search for a book based on calibredb search syntax
  -S, --sort-by 
    sort the books on a specified field
  -g, --go-directly-to
    open $CLI_NAME with a sub-menu pre-selected
  -e, --edit-config
    edit $CLI_NAME config file
  --rofi-theme <path>
    set the path to your rofi config file
  -d,--disown-reading-process
    disown the reading process so you can contine reading even if you close $CLI_NAME
  -D,--no-disown-reading-process
    don't disown the reading process hence when $CLI_NAME closes the app your using to read your book will also close
  -p <selector>,--preferred-selector <selector>
    set the preferred selector for $CLI_NAME to use
  --preview
    enable the preview window
  --no-preview
    disable the preview window
  -r <number>, --no-of-random-books <number>
    the number of random books to show; also makes the cli auto choose Random sub-menu
  -h, --help
    Show this help message and exit
  -v, --version
    print the $CLI_NAME version and exit

arguments:
  completions
    generates shell completions for $CLI_NAME

Examples:
  $CLI_NAME --search tag:chess --sort-by author
  $CLI_NAME --search tag:chess 
  $CLI_NAME --sort-by size 
  $CLI_NAME --go-directly-to Reading-List --sort-by size
  $CLI_NAME --go-directly-to Reading-List 
  $CLI_NAME --no-of-random-books 50 --go-directly-to Random

  $CLI_NAME completions --fish 
" "$CLI_NAME"
  exit "$1"
}

load_config
while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage 0
    ;;
  -v | --version)
    echo "$CLI_NAME $CLI_VERSION Copyright © 2024 $CLI_AUTHOR projects"
    exit 0
    ;;
  -e | --edit-config)
    $PREFERRED_EDITOR "$CLI_CONFIG_FILE" || exit 1
    exit 0
    ;;
  -s | --search)
    [ -n "$2" ] || usage 1
    SEARCH="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"
    shift
    ;;
  -g | --go-directly-to)
    [ -n "$2" ] || usage 1
    GO_DIRECTLY_TO="$2"
    shift
    ;;
  -S | --sort-by)
    [ -n "$2" ] || usage 1
    SORT_BY="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-All}"
    shift
    ;;
  -r | --no-of-random-books)
    [ -n "$2" ] || usage 1
    NO_OF_RANDOM_BOOKS="$2"
    GO_DIRECTLY_TO="${GO_DIRECTLY_TO:-Random}"
    shift
    ;;
  -p | --preferred-selector)
    [ -n "$2" ] || usage 1
    PREFERRED_SELECTOR="$2"
    shift
    ;;
  --private)
    UPDATE_RECENT="false"
    ;;
  --preview)
    ENABLE_PREVIEW="true"
    ;;
  --no-preview)
    ENABLE_PREVIEW="false"
    ;;
  -d | --disown-reading-process)
    DISOWN_READING_PROCESS="true"
    ;;
  -D | --no-disown-reading-process)
    DISOWN_READING_PROCESS="false"
    ;;
  --rofi-theme)
    [ -n "$2" ] || usage 1
    ROFI_THEME="$2"
    shift
    ;;
  -E | --generate-desktop-entry)
    echo "
[Desktop Entry]
Name=$CLI_NAME
Type=Application
version=$CLI_VERSION
Path=$HOME
Comment=Read and manage your calibre books from the terminal
Terminal=false
Icon=$CLI_DIR/assets/logo.png
Exec=$0 --preferred-selector rofi
Categories=Education
    "
    exit 0
    ;;
  completions)
    [ -n "$2" ] || usage 1
    case "$2" in
    -f | --fish)
      echo "\
# --- functions ---
function _lib_x_complete_search
  for comp_line in (calibredb_clean list_categories --csv) 
    echo (echo \$comp_line|cut --delimiter , --fields 1):(echo \$comp_line|cut --delimiter , --fields 2|tr -d '\"')
  end
end

# --- completions ---
complete -c $CLI_NAME --no-files --arguments \"completions\" --condition 'not __fish_contains_opt search s sort-by S e edit-config p preferred-selector d disown-reading-process D no-disown-reading-process E generate-desktop-entry rofi-theme'

complete -c $CLI_NAME --no-files --short-option h --long-option help --description 'Print a short help text and exit'
complete -c $CLI_NAME --no-files --short-option v --long-option version --description 'Print a short version string and exit' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --short-option U --long-option update --description 'Update lib-x' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option e --long-option edit-config --description 'Edit $CLI_NAME config file' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option p --long-option preferred-selector --description 'your preferred selector' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'fzf rofi'
complete -c $CLI_NAME --no-files --short-option d --long-option disown-reading-process --description 'disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option D --long-option no-disown-reading-process --description 'dont disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option E --long-option generate-desktop-entry --description 'generate desktop entry info' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --short-option r --long-option no-of-random-books --description 'the number of random books to show' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(seq 100)\" 
complete -c $CLI_NAME --no-files --short-option P --long-option private --description 'dont update recent' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --long-option preview --description 'enable preview window' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --long-option no-preview --description 'disable preview window' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --force-files --long-option rofi-theme --description 'the path to your rofi config file' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --no-files --short-option S --long-option sort-by --description 'Sort the books by a field' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'author_sort authors comments cover formats identifiers isbn languages last_modified pubdate publisher rating series series_index size tags template timestamp title uuid'
complete -c $CLI_NAME --no-files --short-option g --long-option go-directly-to --description 'Open $CLI_NAME with a sub-menu pre-selected' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'All Reading-List Paused Planing Re-reading Completed Docs Random authors formats identifiers languages  publisher rating series tags Recent'
complete -c $CLI_NAME --no-files --short-option s --long-option search --description 'search for a book' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(_lib_x_complete_search)\"

complete -c $CLI_NAME --no-files --short-option z --long-option zsh --description 'print zsh completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option b --long-option bash --description 'print bash completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option f --long-option fish --description 'print fish completions' --condition '__fish_seen_subcommand_from completions'
    "
      ;;
    -b | --bash)
      # TODO: write bash completions
      command ...
      ;;
    -z | --zsh)
      # TODO: write zsh completions
      command ...
      ;;
    -h | --help)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      ;;
    *)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      exit 1
      ;;
    esac
    exit 0
    ;;
  *)
    usage 1
    ;;
  esac
  shift
done

reload_calibre_data
core_dep_ch
main
